import numpy as np

# Дан случайный массив, поменять знак у элементов, значения которых между 3 и 8
# a = np.arange(15)
# a[(a < 8) & (a > 3)] = a[(a < 8) & (a > 3)] * (-1)
# print(a)

# Заменить максимальный элемент случайного массива на 0
# a = np.arange(15)
# a[a.argmax()] = 0
# print(a)

# Построить прямое произведение массивов (все комбинации с каждым элементом). На вход подается двумерный массив
# a = np.arange(10).reshape(2,5)
# b = np.arange(10).reshape(5,2)
# print(a.dot(b))

# Даны 2 массива A (8x3) и B (2x2).
# Найти строки в A, которые содержат элементы из каждой строки в B, независимо от порядка элементов в B
#
# a = np.random.randint(0, 10, (8,3))
# print(a)
# b = np.random.randint(0, 10, (2,2))
# print(b)
# c = (a[..., np.newaxis,np.newaxis] == b)
# r = (c.sum(axis=(1,2,3)) >= b.shape[1]).nonzero() [0]
# print(r)

#  Дана 10x3 матрица, найти строки из неравных значений (например строка [2,2,3] остается, строка [3,3,3] удаляется)

# arr = np.random.randint(0, 10, (10,3))
# cond = np.logical_and.reduce(arr[:,1:] == arr[:, : -1], axis=1)
# arr_1 = arr[~cond]
# print(arr)
# print(arr_1)

#  Дан двумерный массив. Удалить те строки, которые повторяются

# arr = np.random.randint(0,2, (5,3))
# print(arr)
# arr_1 = np.unique(arr, axis=0)
# print(arr_1)

# Для каждой из следующих задач (1-5) нужно привести 2 реализации – одна без использования numpy (cчитайте, что там, где на входе или выходе должны быть numpy array, будут просто списки),
# а вторая полностью векторизованная с использованием numpy (без использования питоновских циклов/map/list comprehension).
# Замечание 1. Можно считать, что все указанные объекты непустые (к примеру, в задаче 1 на диагонали матрицы есть ненулевые элементы).
# Замечание 2. Для большинства задач решение занимает не больше 1-2 строк.
# 7. Задача 1: Подсчитать произведение ненулевых элементов на диагонали прямоугольной матрицы. Например, для X = np.array([[1, 0, 1], [2, 0, 2], [3, 0, 3], [4, 4, 4]]) ответ 3.

x = np.array([[1, 0, 1], [2, 0, 2], [3, 0, 3], [4, 4, 4]])
print(x)


